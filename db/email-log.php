<?php

namespace MailHawk\DB;

class Email_Log extends DB {


	public function get_db_suffix() {
		return 'mh_email_log';
	}

	public function get_primary_key() {
		return 'ID';
	}

	public function get_db_version() {
		return '1.0';
	}

	public function get_object_type() {
		return 'log';
	}

	/**
	 * Maybe serialize the args...
	 *
	 * @param $args
	 */
	protected function maybe_serialize( &$args ) {
		$args = array_map( 'maybe_serialize', $args );
	}

	/**
	 * Maybe universalize
	 *
	 * @param $obj
	 */
	protected function maybe_unserialize( &$obj ) {

		// unserialize member vars
		$obj = array_map( 'maybe_unserialize', get_object_vars( $obj ) );
		// Cast back to object
		$obj = (object) $obj;
	}

	/**
	 * Wrap for serialization.
	 *
	 * @param array $data
	 *
	 * @return int
	 */
	public function add( $data = array() ) {

		$this->maybe_serialize( $data );

		return parent::add( $data ); // TODO: Change the autogenerated stub
	}

	/**
	 * Wrapper for update
	 *
	 * @param int $row_id
	 * @param array $data
	 * @param array $where
	 *
	 * @return bool
	 */
	public function update( $row_id = 0, $data = [], $where = [] ) {

		$this->maybe_serialize( $data );

		return parent::update( $row_id, $data, $where ); // TODO: Change the autogenerated stub
	}

	/**
	 * Wrapper for maybe unserialize
	 *
	 * @param $row_id
	 *
	 * @return object|void
	 */
	public function get( $row_id ) {
		$obj = parent::get( $row_id );

		if ( is_object( $obj ) ) {
			$this->maybe_unserialize( $obj );
		}

		return $obj;
	}

	/**
	 * Wrapper for maybe unserialize
	 *
	 * @param $column
	 * @param $row_id
	 *
	 * @return object
	 */
	public function get_by( $column, $row_id ) {
		$obj = parent::get_by( $column, $row_id );

		if ( is_object( $obj ) ) {
			$this->maybe_unserialize( $obj );
		}

		return $obj;
	}

	/**
	 * Wrapper to add maybe unserialize
	 *
	 * @param array $query_vars
	 * @param bool $from_cache
	 *
	 * @return array[]|int|object[]
	 */
	public function advanced_query( $query_vars = [], $from_cache = true ) {
		$objs = parent::advanced_query( $query_vars, $from_cache ); // TODO: Change the autogenerated stub

		if ( is_array( $objs ) ) {
			foreach ( $objs as $i => $obj ) {
				$this->maybe_unserialize( $obj );
			}
		}

		return $objs;
	}

	/**
	 * Get columns and formats
	 *
	 * @access  public
	 * @since   2.1
	 */
	public function get_columns() {
		return array(
			'ID'            => '%d',
			'msg_id'        => '%s',
			'recipients'    => '%s',
			'from_address'  => '%s',
			'subject'       => '%s',
			'content'       => '%s',
			'headers'       => '%s',
			'status'        => '%s',
			'error_code'    => '%s',
			'error_message' => '%s',
			'retries'       => '%d',
			'date_sent'     => '%s',
		);
	}

	/**
	 * Get columns and formats
	 *
	 * @access  public
	 * @since   2.1
	 */
	public function get_column_defaults() {
		return array(
			'ID'            => 0,
			'msg_id'        => '',
			'recipients'    => '',
			'from_address'  => '',
			'subject'       => '',
			'content'       => '',
			'headers'       => '',
			'status'        => 'sent',
			'error_code'    => '',
			'error_message' => '',
			'retries'       => 0,
			'date_sent'     => current_time( 'mysql' ),
		);
	}

	public function create_table() {

		global $wpdb;

		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );

		$sql = "CREATE TABLE " . $this->table_name . " (
		ID bigint(20) unsigned NOT NULL AUTO_INCREMENT,
		msg_id text NOT NULL,
		recipients text NOT NULL,
		from_address text NOT NULL,
		subject mediumtext NOT NULL,
		headers mediumtext NOT NULL,
		content longtext NOT NULL,
		status varchar(20) NOT NULL,
		error_code varchar(30) NOT NULL,
		error_message text NOT NULL,
		retries bigint(20) unsigned NOT NULL,
		date_sent datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
		PRIMARY KEY (ID),
		KEY status (status),
		KEY date_sent (date_sent)
		) {$this->get_charset_collate()};";

		dbDelta( $sql );

		update_option( $this->table_name . '_db_version', $this->version );
	}
}
